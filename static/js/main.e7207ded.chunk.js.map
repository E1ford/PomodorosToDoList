{"version":3,"sources":["redux/actionCreators.js","components/head/head.jsx","components/modal/modalHistory/modalHistory.jsx","components/modal/modalSetting/modalSetting.jsx","components/toDoList/inputAddTasks/inputAddTasks.jsx","components/toDoList/toDoList.jsx","components/timer/buttonMode/buttonMode.jsx","components/timer/timerCount/timerCount.jsx","components/timer/timer.jsx","components/app/App.js","redux/reducer.js","redux/store.js","index.js"],"names":["ModalCloase","name","type","payload","Head","activeMode","useSelector","state","mode","dispatch","useDispatch","document","body","style","backgroundColor","className","onClick","overflow","ModalHistory","isOpened","modal","history","title","doneTasks","tasks","filter","el","done","map","item","index","text","pomodoro","shortBreak","longBreak","ModalSetting","timeMode","settings","setting","useState","newSettings","setNewSettings","onModalClose","onChange","e","time","target","value","shortBreack","href","InputAddTasks","onCansel","refInput","useRef","ref","placeholder","current","trim","addNewTask","ToDoList","openForm","setTogleOpenForm","activeTasks","id","changeTaskDone","deleteTask","ButtonMode","onDispatchChangeSettings","buttons","label","clazz","TimerCount","count","setCount","timerActive","settimerActive","format","minutes","Math","floor","seconds","String","length","padTime","useEffect","timer","setTimeout","c","clearTimeout","clazzBtnStartColor","Timer","key","App","initialState","autoPlay","numberPomodoro","login","reducer","action","newTasks","findIndex","sortArr","newId","sort","a","b","newTask","store","createStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e7207ded.chunk.js","sourcesContent":["export let changeMode = (newMode) => ({\r\n  type: 'CHANGE-MODE',\r\n  payload: newMode,\r\n});\r\n\r\nexport let ModalOpenHistory = () => ({\r\n  type: 'MODAL-OPEN-HISTORY',\r\n});\r\nexport let ModalOpenSetting = () => ({\r\n  type: 'MODAL-OPEN-SETTING',\r\n});\r\nexport let ModalCloase = (name) => ({\r\n  type: 'MODAL-CLOASE',\r\n  payload: name,\r\n});\r\nexport let changeTimeModal = (newTime) => ({\r\n  type: 'CHANGE-TIME-MODAL',\r\n  payload: newTime,\r\n});\r\n\r\nexport let addHistoryPomodoro = () => ({\r\n  type: 'ADD-HISTORY-POMODORO',\r\n});\r\nexport let addHistoryShortBreak = () => ({\r\n  type: 'ADD-HISTORY-SHORT-BREAK',\r\n});\r\nexport let addHistoryLongBreak = () => ({\r\n  type: 'ADD-HISTORY-LONG-BREAK',\r\n});\r\n\r\nexport let changeTaskDone = (id) => ({\r\n  type: 'CHANGE-TASK-DONE',\r\n  payload: id,\r\n});\r\nexport let deleteTask = (id) => ({\r\n  type: 'DELETE-TASK',\r\n  payload: id,\r\n});\r\nexport let addNewTask = (text) => ({\r\n  type: 'ADD-NEW-TASK',\r\n  payload: text,\r\n});\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './head.css';\r\nimport { ModalOpenHistory, ModalOpenSetting } from '../../redux/actionCreators';\r\n\r\nconst Head = () => {\r\n  const activeMode = useSelector((state) => state.mode);\r\n  const dispatch = useDispatch();\r\n\r\n  const onModalOpenHistory = () => {\r\n    document.body.style.overflow = 'hidden';\r\n    dispatch(ModalOpenHistory());\r\n  };\r\n  const onModalOpenSetting = () => {\r\n    document.body.style.overflow = 'hidden';\r\n    dispatch(ModalOpenSetting());\r\n  };\r\n  // установка цвета фона сайта\r\n  switch (activeMode) {\r\n    case 'pomodoro':\r\n      document.body.style.backgroundColor = '#d95550';\r\n      break;\r\n    case 'shortBreak':\r\n      document.body.style.backgroundColor = '#4c9195';\r\n      break;\r\n    case 'longBreak':\r\n      document.body.style.backgroundColor = '#457ca3';\r\n      break;\r\n    default:\r\n      document.body.style.backgroundColor = '#d95550';\r\n  }\r\n\r\n  return (\r\n    <div className=\"head\">\r\n      <h2 className=\"head__title\">\r\n        <span>\r\n          <i className=\"head__btn_icon bi bi-pin-angle\"></i>P\r\n        </span>\r\n        omodorosTDL\r\n      </h2>\r\n      <ul>\r\n        <li name=\"History\">\r\n          <button\r\n            onClick={onModalOpenHistory}\r\n            className=\"head__btn_modal\"\r\n            name=\"History\"\r\n            type=\"submit\">\r\n            <i className=\"head__btn_icon bi bi-clipboard-data\" />\r\n            <span>History</span>\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            onClick={onModalOpenSetting}\r\n            className=\"head__btn_modal\"\r\n            name=\"Setting\"\r\n            type=\"submit\">\r\n            <i className=\"head__btn_icon bi bi-gear-wide-connected\" />\r\n            <span>Setting</span>\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button className=\"head__btn_modal\" name=\"Login\" type=\"submit\">\r\n            <i className=\"head__btn_icon bi bi-person-circle\" />\r\n            <span>Login</span>\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Head;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './modalHistory.css';\r\nimport { ModalCloase } from '../../../redux/actionCreators';\r\n\r\nconst ModalHistory = () => {\r\n  const state = useSelector((state) => state),\r\n    isOpened = state.modal.history.isOpened,\r\n    title = state.modal.history.title,\r\n    dispatch = useDispatch(),\r\n    history = state.history;\r\n\r\n  const onModalClose = () => {\r\n    dispatch(ModalCloase(title));\r\n  };\r\n  const doneTasks = state.tasks\r\n    .filter((el) => el.done === true)\r\n    .map((item, index) => {\r\n      return (\r\n        <li key={index} className=\"modal__done-tasks-item\">\r\n          <div className=\"done-tasks__index\">{index + 1 + '.'}</div>\r\n          <div className=\"done-tasks\">{item.text}</div>\r\n        </li>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div className={`modal__wrapper ${isOpened ? 'open' : 'close'}`}>\r\n      <div className=\"modal__body\">\r\n        <div className=\"modal__close\" onClick={onModalClose}>\r\n          ×\r\n        </div>\r\n        <h2>{title}</h2>\r\n        <hr />\r\n        <div className=\"mode__first-box\">\r\n          <div className=\"modal__history-mode\">\r\n            <p>Pomodoro</p>\r\n            <p>{history.pomodoro}</p>\r\n          </div>\r\n          <div className=\"modal__history-mode\">\r\n            <p>Short break</p>\r\n            <p>{history.shortBreak}</p>\r\n          </div>\r\n          <div className=\"modal__history-mode\">\r\n            <p>Long break</p>\r\n            <p>{history.longBreak}</p>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h2 className=\"modal__title-toDoList\">To Do List</h2>\r\n          <ul className=\"modal__done-list-tasks\">{doneTasks}</ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalHistory;\r\n","import { useState } from 'react';\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './modalSetting.css';\r\nimport { ModalCloase, changeTimeModal } from '../../../redux/actionCreators';\r\n\r\nconst ModalSetting = () => {\r\n  const state = useSelector((state) => state),\r\n    timeMode = state.settings,\r\n    dispatch = useDispatch(),\r\n    isOpened = state.modal.setting.isOpened,\r\n    title = state.modal.setting.title;\r\n\r\n  const [newSettings, setNewSettings] = useState(timeMode);\r\n\r\n  // меняем локальный state\r\n  const updateSettingPomodoro = (e) => {\r\n    setNewSettings({ ...newSettings, pomodoro: { ...newSettings.pomodoro, time: e.target.value } });\r\n  };\r\n  const updateSettingShortBreack = (e) => {\r\n    setNewSettings({\r\n      ...newSettings,\r\n      shortBreak: { ...newSettings.shortBreack, time: e.target.value },\r\n    });\r\n  };\r\n  const updateSettingLongBreack = (e) => {\r\n    setNewSettings({\r\n      ...newSettings,\r\n      longBreak: { ...newSettings.longBreak, time: e.target.value },\r\n    });\r\n  };\r\n\r\n  //закрытие модального окна\r\n  const onModalClose = () => {\r\n    dispatch(ModalCloase(title));\r\n  };\r\n  // установка новых значений в таймер кнопка(ок)\r\n  let onUpdateTime = () => {\r\n    onModalClose();\r\n    dispatch(changeTimeModal(newSettings));\r\n  };\r\n\r\n  return (\r\n    <div className={`modal__wrapper ${isOpened ? 'open' : 'close'}`}>\r\n      <div className=\"modal__body\">\r\n        <div className=\"modal__close\" onClick={onModalClose}>\r\n          ×\r\n        </div>\r\n        <h2>{title}</h2>\r\n        <hr />\r\n        <div className=\"modal__time-wrapper\">\r\n          <h2>Time(minutes)</h2>\r\n          <div className=\"modal__time-mode-wrapper\">\r\n            <div className=\"modal__modes\">\r\n              <p>Pomodoro</p>\r\n              <input\r\n                name=\"pomodoro\"\r\n                onChange={updateSettingPomodoro}\r\n                type=\"number\"\r\n                value={newSettings.pomodoro.time}\r\n                className=\"modal__input\"\r\n              />\r\n            </div>\r\n            <div className=\"modal__modes\">\r\n              <p>Short breack</p>\r\n              <input\r\n                name=\"shortBreak\"\r\n                onChange={updateSettingShortBreack}\r\n                type=\"number\"\r\n                value={newSettings.shortBreak.time}\r\n                className=\"modal__input\"\r\n              />\r\n            </div>\r\n            <div className=\"modal__modes\">\r\n              <p>Long breack</p>\r\n              <input\r\n                name=\"longBreak\"\r\n                onChange={updateSettingLongBreack}\r\n                type=\"number\"\r\n                value={newSettings.longBreak.time}\r\n                className=\"modal__input\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button onClick={onUpdateTime} href=\"/\" className=\"mode__double-border-button\">\r\n          OK\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalSetting;\r\n","import { useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport './inputAddTasks.css';\r\nimport { addNewTask } from '../../../redux/actionCreators';\r\n\r\nconst InputAddTasks = ({ onCansel }) => {\r\n  const refInput = useRef(null);\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddNewTask = () => {\r\n    let text = refInput.current.value;\r\n    if (!!text.trim()) {\r\n      dispatch(addNewTask(text));\r\n      refInput.current.value = '';\r\n    } else {\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"form-wrapper\">\r\n      <div className=\"form-input-wrapper\">\r\n        <input\r\n          ref={refInput}\r\n          placeholder=\"What are you working on?\"\r\n          type=\"text\"\r\n          className=\"input-form\"\r\n        />\r\n      </div>\r\n      <div className=\"input-button\">\r\n        <button\r\n          onClick={() => {\r\n            onCansel(false);\r\n          }}\r\n          className=\"cansel-btn\">\r\n          Cancel\r\n        </button>\r\n        <button onClick={onAddNewTask} className=\"save-btn\">\r\n          Save\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputAddTasks;\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport './toDoList.css';\r\nimport { deleteTask, changeTaskDone } from '../../redux/actionCreators';\r\nimport InputAddTasks from './inputAddTasks/inputAddTasks';\r\n\r\nconst ToDoList = () => {\r\n  let [openForm, setTogleOpenForm] = useState(false);\r\n\r\n  const state = useSelector((state) => state),\r\n    dispatch = useDispatch(),\r\n    tasks = state.tasks;\r\n\r\n  const onChangeTaskDone = (id) => {\r\n    dispatch(changeTaskDone(id));\r\n  };\r\n  const onDeleteTask = (id) => {\r\n    dispatch(deleteTask(id));\r\n  };\r\n\r\n  let activeTasks = tasks\r\n    .filter((el) => el.done === false)\r\n    .map((item, index) => {\r\n      return (\r\n        <li key={index} className=\"tasks__item-list\">\r\n          <div className=\"content-left\" name={item.name}>\r\n            <button\r\n              onClick={() => {\r\n                onChangeTaskDone(item.id);\r\n              }}\r\n              className=\"btn-ok\">\r\n              <i className=\"bi bi-patch-check\"></i>\r\n            </button>\r\n            <div className=\"textToDo\">{item.text}</div>\r\n          </div>\r\n          <button\r\n            onClick={() => {\r\n              onDeleteTask(item.id);\r\n            }}\r\n            className=\"btn-ok\">\r\n            <i className=\"bi bi-trash\"></i>\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div className=\"tasks__wrapper\">\r\n      <div className=\"tasks__active-tasks\">\r\n        <ul className=\"tasks__active-list\">{activeTasks}</ul>\r\n      </div>\r\n      {openForm ? (\r\n        <InputAddTasks onCansel={setTogleOpenForm} />\r\n      ) : (\r\n        <button\r\n          onClick={() => {\r\n            setTogleOpenForm(true);\r\n          }}\r\n          className=\"tasks__button-add-task\">\r\n          +Add task\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToDoList;\r\n","import { changeMode } from '../../../redux/actionCreators';\r\n\r\nimport './buttonMode.css';\r\n\r\nconst ButtonMode = ({ mode, dispatch }) => {\r\n  const onDispatchChangeSettings = (e) => {\r\n    dispatch(changeMode(e.target.name));\r\n  };\r\n\r\n  const buttonData = [\r\n    { name: 'pomodoro', label: 'Pomodoro' },\r\n    { name: 'shortBreak', label: 'Short Break' },\r\n    { name: 'longBreak', label: 'Long Break' },\r\n  ];\r\n  const buttons = buttonData.map((item) => {\r\n    const active = mode === item.name;\r\n    const clazz = active ? 'timer__button_active' : 'timer__button_mode';\r\n    return (\r\n      <button\r\n        onClick={onDispatchChangeSettings}\r\n        className={clazz}\r\n        name={item.name}\r\n        key={item.name}\r\n        type=\"button\">\r\n        {item.label}\r\n      </button>\r\n    );\r\n  });\r\n\r\n  return <div className=\"timer__button\">{buttons}</div>;\r\n};\r\n\r\nexport default ButtonMode;\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport React from 'react';\r\n\r\nimport './timerCount.css';\r\nimport {\r\n  addHistoryPomodoro,\r\n  addHistoryLongBreak,\r\n  addHistoryShortBreak,\r\n} from '../../../redux/actionCreators';\r\n\r\nconst TimerCount = ({ settings, mode }) => {\r\n  const dispatch = useDispatch();\r\n  let timeMode;\r\n\r\n  switch (mode) {\r\n    case 'pomodoro':\r\n      timeMode = settings.pomodoro.time;\r\n      break;\r\n    case 'shortBreak':\r\n      timeMode = settings.shortBreak.time;\r\n      break;\r\n    case 'longBreak':\r\n      timeMode = settings.longBreak.time;\r\n      break;\r\n    default:\r\n      timeMode = '';\r\n  }\r\n\r\n  let [count, setCount] = useState(timeMode * 60);\r\n  let [timerActive, settimerActive] = useState(false);\r\n\r\n  const onToggleStart = () => {\r\n    settimerActive((state) => {\r\n      return !state;\r\n    });\r\n  };\r\n\r\n  // ф-ция по добававлению 0 если длина читсла 1\r\n  const padTime = (time) => {\r\n    return String(time).length === 1 ? `0${time}` : `${time}`;\r\n  };\r\n  // форматирует время в MM:СС\r\n  const format = (time) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = time % 60;\r\n    return `${minutes}:${padTime(seconds)}`;\r\n  };\r\n  // окончание таймера запись в историю\r\n\r\n  useEffect(() => {\r\n    if (count === 20) {\r\n      if (mode === 'pomodoro') {\r\n        dispatch(addHistoryPomodoro());\r\n      } else if (mode === 'shortBreak') {\r\n        dispatch(addHistoryShortBreak());\r\n      } else if (mode === 'longBreak') {\r\n        dispatch(addHistoryLongBreak());\r\n      }\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [count]);\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (count > 0 && timerActive) {\r\n      timer = setTimeout(\r\n        () =>\r\n          setCount((c) => {\r\n            return c - 1;\r\n          }),\r\n        1000,\r\n      );\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, [count, timerActive]);\r\n\r\n  //стилизация кнопки старт let clazzTimerColor= 'timer';\r\n  let clazzBtnStartColor = 'timer__btn_start';\r\n  switch (mode) {\r\n    case 'shortBreak':\r\n      clazzBtnStartColor = 'timer__btn_start blue';\r\n      break;\r\n    case 'longBreak':\r\n      clazzBtnStartColor = 'timer__btn_start navyBlue';\r\n      break;\r\n    default:\r\n      clazzBtnStartColor = 'timer__btn_start';\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"timer__string\">\r\n        {count > 0 && timerActive ? format(count) : format(count)}\r\n      </div>\r\n      <button onClick={onToggleStart} className={clazzBtnStartColor}>\r\n        {timerActive ? 'stop' : 'start'}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TimerCount;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport ButtonMode from './buttonMode/buttonMode';\r\nimport TimerCount from './timerCount/timerCount';\r\nimport './timer.css';\r\n\r\nconst Timer = () => {\r\n  const { mode, settings } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  //костыль для обновления таймера при смене времени\r\n  let key = settings.pomodoro.time + settings.shortBreak.time + settings.longBreak.time;\r\n  return (\r\n    <div className=\"timer__wrapper\">\r\n      <ButtonMode mode={mode} dispatch={dispatch} />\r\n      <TimerCount key={key} mode={mode} settings={settings} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import { useSelector } from 'react-redux';\r\nimport React from 'react';\r\n\r\nimport Head from '../head/head';\r\nimport ModalHistory from '../modal/modalHistory/modalHistory';\r\nimport ModalSetting from '../modal/modalSetting/modalSetting';\r\nimport ToDoList from '../toDoList/toDoList';\r\nimport Timer from '../timer/timer';\r\nimport './app.css';\r\n\r\nconst App = () => {\r\n  // костыль для перерисовки таймера\r\n  const state = useSelector((state) => state);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <Head />\r\n        <div className=\"body\">\r\n          <Timer key={state.mode} />\r\n          <ToDoList />\r\n        </div>\r\n      </div>\r\n      <ModalHistory />\r\n      <ModalSetting />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","let initialState = {\r\n  settings: {\r\n    pomodoro: {\r\n      name: 'pomodoro',\r\n      time: 25,\r\n    },\r\n    shortBreak: {\r\n      name: 'shortBreak',\r\n      time: 5,\r\n    },\r\n    longBreak: {\r\n      name: 'longBreak',\r\n      time: 10,\r\n    },\r\n    autoPlay: false,\r\n  },\r\n  tasks: [\r\n    {\r\n      id: 3,\r\n      text: 'хей нажми на эту кнопку, что бы удалить эту  задачу ⇒',\r\n      numberPomodoro: 1,\r\n      done: false,\r\n    },\r\n    { id: 0, text: '⇐ А теперь нажми сюда если сделал ее', numberPomodoro: 2, done: false },\r\n    {\r\n      id: 2,\r\n      text: 'Прошлая задача исчезла но ты все еще можешь посмотреть ее нажав на кнопку  History, она находится на самом верху ↑',\r\n      numberPomodoro: 4,\r\n      done: false,\r\n    },\r\n    {\r\n      id: 1,\r\n      text: 'что бы добавить задачу нажми на кнопку +Add task которая находится в самом низу 🠗',\r\n      numberPomodoro: 4,\r\n      done: false,\r\n    },\r\n  ],\r\n  mode: 'pomodoro',\r\n  modal: {\r\n    history: {\r\n      isOpened: false,\r\n      title: 'History',\r\n    },\r\n    setting: {\r\n      isOpened: false,\r\n      title: 'Setting',\r\n    },\r\n    login: {\r\n      isOpened: false,\r\n      title: 'Login',\r\n    },\r\n  },\r\n  history: {\r\n    pomodoro: 0,\r\n    shortBreak: 0,\r\n    longBreak: 0,\r\n  },\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE-MODE': {\r\n      return { ...state, mode: action.payload };\r\n    }\r\n    case 'MODAL-OPEN-HISTORY': {\r\n      return {\r\n        ...state,\r\n        modal: { ...state.modal, history: { ...state.modal.history, isOpened: true } },\r\n      };\r\n    }\r\n    case 'MODAL-OPEN-SETTING': {\r\n      return {\r\n        ...state,\r\n        modal: { ...state.modal, setting: { ...state.modal.setting, isOpened: true } },\r\n      };\r\n    }\r\n    case 'MODAL-CLOASE': {\r\n      document.body.style.overflow = '';\r\n      return {\r\n        ...state,\r\n        modal: {\r\n          ...state.modal,\r\n          setting: { ...state.modal.setting, isOpened: false },\r\n          history: { ...state.modal.history, isOpened: false },\r\n        },\r\n      };\r\n    }\r\n    case 'CHANGE-TIME-MODAL': {\r\n      return { ...state, settings: { ...action.payload } };\r\n    }\r\n    case 'ADD-HISTORY-POMODORO': {\r\n      return { ...state, history: { ...state.history, pomodoro: state.history.pomodoro + 1 } };\r\n    }\r\n    case 'ADD-HISTORY-SHORT-BREAK': {\r\n      return { ...state, history: { ...state.history, shortBreak: state.history.shortBreak + 1 } };\r\n    }\r\n    case 'ADD-HISTORY-LONG-BREAK': {\r\n      return { ...state, history: { ...state.history, longBreak: state.history.longBreak + 1 } };\r\n    }\r\n    case 'CHANGE-TASK-DONE': {\r\n      let newTasks = [...state.tasks];\r\n      let index = newTasks.findIndex((el) => el.id === action.payload);\r\n      newTasks[index].done = true;\r\n      return { ...state, tasks: newTasks };\r\n    }\r\n    case 'DELETE-TASK': {\r\n      let newTasks = state.tasks.filter((el) => el.id !== action.payload);\r\n      return { ...state, tasks: newTasks };\r\n    }\r\n    case 'ADD-NEW-TASK': {\r\n      let sortArr = [...state.tasks];\r\n      const newId = sortArr.sort((a, b) => a.id - b.id).length;\r\n      let newTask = { id: newId, text: action.payload, numberPomodoro: 1, done: false };\r\n      return { ...state, tasks: [...state.tasks, newTask] };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\n\r\nlet store = createStore(\r\n  reducer,\r\n  //   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\n\nimport App from './components/app/App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}