{"version":3,"sources":["components/head/head.jsx","components/modal/modal.jsx","components/timer/buttonMode/buttonMode.jsx","components/timer/timerCount/timerCount.jsx","components/timer/timer.jsx","components/app/App.js","index.js"],"names":["Head","props","onOpenModal","e","onToggleModalOpen","target","name","clazzBorder","clazzBtn","mode","className","onClick","type","src","alt","Modal","isOpened","title","data","onModalClose","ButtonMode","onModeSelect","onClickChangeSettings","buttons","label","map","item","clazz","TimerCount","settings","activeTime","time","React","useState","count","setCount","timerActive","settimerActive","format","minutes","Math","floor","seconds","String","length","padTime","useEffect","timer","setTimeout","c","clearTimeout","clazzBtnStartColor","state","Timer","clazzTimerColor","App","setState","modal","setting","login","history","console","log","onChangeVisibleSettings","store","pomodoro","shortBreak","longBreak","this","document","body","style","backgroundColor","VisibleSetting","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b13f2803.chunk.js","sourcesContent":["\r\nimport './head.css'\r\n\r\nconst Head =(props)=>{\r\n\r\nconst onOpenModal=(e)=>{\r\n    props.onToggleModalOpen(e.target.name)\r\n}\r\n\r\n    let clazzBorder= '';\r\n    let clazzBtn= '';\r\n    switch(props.mode){\r\n        case \"shortBreak\":\r\n            clazzBorder = \"head head__blue\"\r\n            clazzBtn = 'btn btn__blue'\r\n                break;\r\n        case \"longBreak\":\r\n            clazzBorder = \"head head__navyBlue\"\r\n            clazzBtn = 'btn btn__navyBlue'\r\n                break;\r\n        default:\r\n            clazzBorder = \"head\"\r\n            clazzBtn = 'btn'\r\n    }\r\n\r\n\r\n    return(\r\n        \r\n        <div className={clazzBorder}>\r\n            \r\n            <h2 className=\"head-title\">pomodorosTDL</h2>\r\n            <ul>\r\n            \r\n                <li name=\"History\">\r\n                    <button onClick={onOpenModal} className={clazzBtn} name=\"History\"type=\"submit\">\r\n                        <img name=\"History\"src=\"https://pomofocus.io/icons/graph-white.png\" alt=\"\" /> History\r\n                    </button>\r\n                </li>\r\n\r\n                <li>\r\n                    <button onClick={onOpenModal} className={clazzBtn} name=\"Setting\" type=\"submit\">\r\n                        <img name=\"Setting\" src=\"\thttps://pomofocus.io/icons/config-white.png\" alt=\"\" />  Setting\r\n                        </button>\r\n                </li> \r\n                \r\n                <li>\r\n                    <button onClick={onOpenModal} className={clazzBtn} name=\"Login\" type=\"submit\">\r\n                        <img name=\"Login\" src=\"https://pomofocus.io/icons/user-white.png\" alt=\"\" /> Login\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Head;","import './modal.css'\r\n\r\n\r\n\r\n\r\n\r\nconst Modal = ({isOpened, title, data,onModalClose}) =>{\r\n    return (\r\n        <div className={`modal__wrapper ${isOpened ? 'open' : 'close'}`}>\r\n            <div className=\"modal__body\">\r\n                <div className=\"modal__close\" onClick={onModalClose}>×</div>\r\n                <h2>{title}</h2>\r\n                <hr />\r\n                {data}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Modal;","\r\nimport './buttonMode.css'\r\n\r\nconst ButtonMode =({mode,onModeSelect})=>{\r\n\r\n    const onClickChangeSettings=(e)=>{\r\n        onModeSelect(e.target.name)\r\n    }\r\n\r\n\r\n    const buttonData  =[\r\n        {name:'pomodoro', label:'Pomodoro'},\r\n        {name:'shortBreak', label:'Short Break'},\r\n        {name:'longBreak', label:'Long Break'}\r\n    ]\r\n    const buttons = buttonData.map(item =>{\r\n        const active = mode === item.name;\r\n        const clazz = active ? \"timer-btn__mode-active\" :  \"timer-btn__mode\";\r\n        return <button \r\n                onClick={onClickChangeSettings}\r\n                className={clazz}\r\n                name={item.name}\r\n                key = {item.name}\r\n                type=\"button\">\r\n                    {item.label}\r\n            </button>\r\n    })\r\n\r\n    return(\r\n        <div className=\"timer-btn\">\r\n            {buttons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonMode;","import React from 'react'\r\nimport './timerCount.css'\r\n\r\nconst TimerCount =({settings})=>{\r\n  \r\n  let activeTime = settings.time * 60;\r\n\r\n  let [count,setCount] = React.useState(activeTime);\r\n  let [timerActive, settimerActive] = React.useState(false);\r\n\r\n  const onToggleStart=()=>{\r\n    settimerActive(state=>{\r\n      return  !state})\r\n  }\r\n  // ф-ция по добававлению 0 если длина читсла 1 \r\n    const padTime = time => {\r\n        return String(time).length === 1 ? `0${time}` : `${time}`;\r\n    };\r\n      \r\n      // форматирует время в MM:СС\r\n    const format = time => {\r\n        const minutes = Math.floor(time / 60);\r\n        const seconds = time % 60;\r\n        \r\n        return `${minutes}:${padTime(seconds)}`;\r\n    };\r\n    // React.useEffect(()=>{\r\n    //   setCount(activeTime)\r\n    // },[]);\r\n    React.useEffect(() => {\r\n      let timer;\r\n      if (count > 0 && timerActive) {\r\n        timer = setTimeout(() => setCount(c => c - 1), 1000);\r\n      }\r\n\r\n      return () => {\r\n        if (timer) {\r\n          clearTimeout(timer);\r\n        }\r\n      };\r\n    }, [count, timerActive ]);\r\n\r\n\r\n\r\n    //стилизация кнопки старт let clazzTimerColor= 'timer';\r\n    let clazzBtnStartColor = 'timer-btn-start'\r\n    switch(settings.name){\r\n      case \"shortBreak\":\r\n        clazzBtnStartColor = \"timer-btn-start btn-start__blue\";\r\n              break;\r\n      case \"longBreak\":\r\n        clazzBtnStartColor = \"timer-btn-start btn-start__navyBlue\";\r\n              break;\r\n      default:\r\n        clazzBtnStartColor = \"timer-btn-start\";\r\n  }\r\n\r\n    return(\r\n          <>\r\n            <div className=\"timer-string\">{ count > 0 && timerActive ? format(count) : format(count)}</div>\r\n            <div className=\"\">\r\n                <button onClick={onToggleStart} className={clazzBtnStartColor}>{timerActive? \"stop\" : \"start\"}</button>\r\n            </div>\r\n          </>\r\n    )\r\n}\r\n\r\nexport default TimerCount;","import ButtonMode from \"./buttonMode/buttonMode\"\r\nimport TimerCount from \"./timerCount/timerCount\"\r\nimport './timer.css'\r\n\r\nconst Timer =(props)=>{\r\n    const {mode,settings} = props\r\n\r\n\r\n    //установка класса цвета timer \r\n    let clazzTimerColor= 'timer';\r\n    switch(mode){\r\n        case \"shortBreak\":\r\n            clazzTimerColor = \"timer timer__blue\";\r\n                break;\r\n        case \"longBreak\":\r\n            clazzTimerColor = \"timer timer__navyBlue\";\r\n                break;\r\n        default:\r\n            clazzTimerColor = \"timer\";\r\n    }\r\n\r\n\r\n    // const clazzStart = activeBtnStart ? \"timer-btn-stop\" : \"timer-btn-start\";\r\n    // const valueBtnStart= activeBtnStart ? \"stop\" : \"start\"\r\n\r\n    return(\r\n        <div className={clazzTimerColor}>\r\n            <div className=\"timer-btn\">\r\n                <ButtonMode mode={mode}\r\n                onModeSelect={props.onModeSelect}/>\r\n            </div>\r\n            <TimerCount settings ={settings}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","import {Component} from 'react'\r\nimport Head from \"../head/head\"\r\nimport Modal from '../modal/modal';\r\nimport Timer from \"../timer/timer\"\r\n\r\nimport './app.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state =  {\r\n      store:{\r\n        pomodoro:{ \r\n          name:\"pomodoro\",\r\n          time: 25,\r\n        },\r\n        shortBreak:{\r\n          name:\"shortBreak\",\r\n          time: 5,\r\n        },\r\n        longBreak:{\r\n          name:\"longBreak\",\r\n          time: 15,\r\n        }\r\n      },\r\n      mode: \"pomodoro\",\r\n      modal:{\r\n        history:{\r\n          isOpened:false,\r\n          title:\"History\",\r\n        },\r\n        setting:{\r\n          isOpened:false,\r\n          title:\"Setting\",\r\n        },\r\n        login:{\r\n          isOpened:false,\r\n          title:\"Login\",\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // изменение цвета в зависимости от mode\r\n  \r\n  componentDidUpdate(){\r\n    switch(this.state.mode){\r\n      case \"pomodoro\":\r\n        document.body.style.backgroundColor = \"#d95550\"\r\n              break;\r\n      case \"shortBreak\":\r\n        document.body.style.backgroundColor = \"#4c9195\"\r\n              break;\r\n      case \"longBreak\":\r\n        document.body.style.backgroundColor = \"#457ca3\"\r\n              break;\r\n      default:\r\n        document.body.style.backgroundColor = \"#d95550\"\r\n    }\r\n\r\n  }\r\n\r\nonModeSelect=(mode)=>{\r\n  this.setState(state=>({...state, mode:mode}))\r\n}\r\n//открытие и закрытие модального окна\r\nonToggleModalOpen=(name)=>{\r\n  debugger\r\n  switch(name){\r\n    case \"History\":\r\n      // отключает все модалки, и включает ту на которую нажали\r\n      this.setState(state=>({...state,\r\n         modal: {\r\n           setting:\r\n            {...state.modal.setting, isOpened: false },\r\n            login:{...state.modal.login,isOpened:false }, \r\n            history:{isOpened : !state.modal.history.isOpened , title:state.modal.history.title}}}))\r\n            break;\r\n    case \"Setting\":\r\n      this.setState(state=>({...state, modal: {history:{...state.modal.history, isOpened: false },login:{...state.modal.login,isOpened:false }, setting:{isOpened : !state.modal.setting.isOpened , title:state.modal.setting.title}}}))\r\n            break;\r\n    case \"Login\":\r\n      this.setState(state=>({...state, modal: {history:{...state.modal.history, isOpened: false },setting:{...state.modal.setting,isOpened:false }, login:{isOpened : !state.modal.login.isOpened , title:state.modal.login.title}}}))\r\n            break;\r\n    default:\r\n      console.log('default')\r\n  }\r\n}\r\n// передаваемые настройки таймера в зависимости от нажатой кнопки \r\n  onChangeVisibleSettings=(store,mode)=>{\r\n      switch(mode){\r\n        case \"pomodoro\":\r\n                return store.pomodoro\r\n        case \"shortBreak\":\r\n                return store.shortBreak\r\n        case \"longBreak\":\r\n                  return store.longBreak\r\n        default:\r\n                 return store.pomodoro\r\n      }\r\n  }\r\n  render(){\r\n    const {store,mode} = this.state;\r\n    const {history,login,setting} = this.state.modal\r\n    \r\n\r\n\r\n    let VisibleSetting = this.onChangeVisibleSettings(store, mode);\r\n    // if(VisibleSetting.name == mode)\r\n    // let VisibleSetting = this.onChangeVisibleSettings(store, mode);\r\n    \r\n    return (\r\n      <>\r\n        <Modal key={history.title} isOpened={history.isOpened} title={history.title} onModalClose={()=>{this.onToggleModalOpen(history.title)}}/>\r\n        <Modal key={login.title} isOpened={login.isOpened} title={login.title} onModalClose={()=>{this.onToggleModalOpen(login.title)}}/>\r\n        <Modal key={setting.title} isOpened={setting.isOpened} title={setting.title} onModalClose={()=>{this.onToggleModalOpen(setting.title)}}/>\r\n        <div className=\"container\">\r\n          <Head onToggleModalOpen={this.onToggleModalOpen} mode={mode}/>\r\n          <div className=\"body\">\r\n            <Timer onModeSelect={this.onModeSelect} mode={mode} key= {mode} settings={VisibleSetting}/>\r\n            \r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}