{"version":3,"sources":["redux/actionCreators.js","components/head/head.jsx","components/modal/modalHistory/modalHistory.jsx","components/modal/modalSetting/modalSetting.jsx","components/toDoList/inputAddTasks/inputAddTasks.jsx","components/toDoList/toDoList.jsx","components/timer/buttonMode/buttonMode.jsx","components/timer/timerCount/timerCount.jsx","components/timer/timer.jsx","components/app/App.js","redux/reducer.js","redux/store.js","index.js"],"names":["ModalCloase","name","type","payload","Head","activeMode","useSelector","state","mode","dispatch","useDispatch","document","body","style","backgroundColor","className","onClick","ModalHistory","isOpened","modal","history","title","doneTasks","tasks","filter","el","done","map","item","index","text","pomodoro","shortBreak","longBreak","ModalSetting","timeMode","settings","setting","useState","newSettings","setNewSettings","onModalClose","onChange","e","time","target","value","shortBreack","href","InputAddTasks","placeholder","props","onCansel","React","Component","ToDoList","openForm","setTogleOpenForm","activeTasks","id","changeTaskDone","deleteTask","ButtonMode","onDispatchChangeSettings","buttons","label","clazz","TimerCount","count","setCount","timerActive","settimerActive","format","minutes","Math","floor","seconds","String","length","padTime","useEffect","timer","setTimeout","c","clearTimeout","clazzBtnStartColor","Timer","key","App","initialState","autoPlay","numberPomodoro","login","reducer","action","newTasks","findIndex","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.09e915f3.chunk.js","sourcesContent":["\r\nexport let changeMode = (newMode) => ({\r\n    type: \"CHANGE-MODE\",\r\n    payload: newMode\r\n});\r\n\r\n\r\nexport let ModalOpenHistory = () => ({\r\n    type: \"MODAL-OPEN-HISTORY\"\r\n});\r\nexport let ModalOpenSetting = () => ({\r\n    type: \"MODAL-OPEN-SETTING\"\r\n});\r\nexport let ModalCloase = (name) => ({\r\n    type: \"MODAL-CLOASE\",\r\n    payload: name\r\n});\r\nexport let changeTimeModal = (newTime) => ({\r\n    type: \"CHANGE-TIME-MODAL\",\r\n    payload:newTime\r\n});\r\n\r\n\r\nexport let addHistoryPomodoro = () => ({\r\n    type: \"ADD-HISTORY-POMODORO\",\r\n});\r\nexport let addHistoryShortBreak = () => ({\r\n    type: \"ADD-HISTORY-SHORT-BREAK\",\r\n});\r\nexport let addHistoryLongBreak = () => ({\r\n    type: \"ADD-HISTORY-LONG-BREAK\",\r\n});\r\n\r\n\r\nexport let changeTaskDone = (id) => ({\r\n    type: \"CHANGE-TASK-DONE\",\r\n    payload:id\r\n});\r\nexport let deleteTask = (id) => ({\r\n    type: \"DELETE-TASK\",\r\n    payload:id\r\n});\r\nexport let addNewTask = (text) => ({\r\n    type: \"ADD-NEW-TASK\",\r\n    payload:text\r\n});","import { useSelector, useDispatch } from 'react-redux'\r\nimport './head.css'\r\nimport {ModalOpenHistory,ModalOpenSetting} from '../../redux/actionCreators'\r\n\r\nconst Head =()=>{\r\n    const activeMode = useSelector(state=>state.mode);\r\n    const dispatch = useDispatch()\r\n\r\n    \r\n    const onModalOpenHistory=()=>{\r\n        dispatch(ModalOpenHistory())\r\n    }\r\n    const onModalOpenSetting=()=>{\r\n        dispatch(ModalOpenSetting())\r\n    }\r\n    // установка цвета фона сайта \r\n    switch(activeMode){\r\n        case \"pomodoro\":\r\n            document.body.style.backgroundColor = \"#d95550\"\r\n                break;\r\n        case \"shortBreak\":\r\n            document.body.style.backgroundColor = \"#4c9195\"\r\n                break;\r\n        case \"longBreak\":\r\n            document.body.style.backgroundColor = \"#457ca3\"\r\n                break;\r\n        default:\r\n            document.body.style.backgroundColor = \"#d95550\"\r\n        }\r\n\r\n\r\n    return(\r\n        \r\n        <div className=\"head\">\r\n            <h2 className=\"head-title\">\r\n                \r\n                <span><i className=\"head-btn bi bi-pin-angle\"></i>P</span>omodorosTDL\r\n            </h2>\r\n            <ul>\r\n                <li name=\"History\">\r\n                    <button onClick={onModalOpenHistory} className='btn' name=\"History\"type=\"submit\">\r\n                        <i className=\"head-btn bi bi-clipboard-data\"/>\r\n                        <span>History</span>\r\n                    </button>\r\n                </li>\r\n                <li>\r\n                    <button onClick={onModalOpenSetting} className='btn'  name=\"Setting\" type=\"submit\">\r\n                        <i className=\"head-btn bi bi-gear-wide-connected\"/>\r\n                        <span>Setting</span>\r\n                    </button>\r\n                </li> \r\n                <li>\r\n                    <button className='btn'  name=\"Login\" type=\"submit\">\r\n                        <i className=\"head-btn bi bi-person-circle\"/>\r\n                        <span>Login</span>\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Head;","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport './modalHistory.css'\r\nimport {ModalCloase} from '../../../redux/actionCreators'\r\n\r\nconst ModalHistory = () =>{\r\n\r\n    const state = useSelector(state => state),\r\n        isOpened = state.modal.history.isOpened,\r\n        title =  state.modal.history.title,\r\n        dispatch=useDispatch(),\r\n        history= state.history;\r\n\r\n    const onModalClose=()=>{\r\n        dispatch(ModalCloase(title))\r\n    }\r\n    const doneTasks = state.tasks.filter(el => el.done === true).map((item,index) =>{\r\n        return  (<li key = {index} className='done-tasks-item'>\r\n                    <div className='div-index-task'>{index+1+'.'}</div>\r\n                    <div className='done-tasks'>{item.text}</div>\r\n                </li>)\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={`modal__wrapper ${isOpened ? 'open' : 'close'}`}>\r\n            <div className=\"modal__body\">\r\n                <div className=\"modal__close\" onClick={onModalClose}>×</div>\r\n                <h2>{title}</h2>\r\n                <hr />\r\n                <div className='history-one-block'>\r\n                    <div className=\"history-mode\">\r\n                        <p>Pomodoro</p>\r\n                        <p>{history.pomodoro}</p>\r\n                    </div>\r\n                    <div className=\"history-mode\">\r\n                        <p>Short break</p>\r\n                        <p>{history.shortBreak}</p>\r\n                        \r\n                    </div>\r\n                    <div className=\"history-mode\">\r\n                        <p>Long break</p>\r\n                        <p>{history.longBreak}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"history-two-block\">\r\n                    <h2 className='title-toDoList'>To Do List</h2>\r\n                    <ul className='ul-done-tasks'>\r\n                        {doneTasks}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ModalHistory;","import {useState} from 'react';\r\nimport React from 'react';\r\nimport './modalSetting.css'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {ModalCloase, changeTimeModal} from '../../../redux/actionCreators'\r\n\r\n\r\nconst ModalSetting = () =>{\r\n    const state = useSelector(state=>state),\r\n            timeMode = state.settings,\r\n            dispatch = useDispatch(),\r\n            isOpened = state.modal.setting.isOpened,\r\n            title = state.modal.setting.title\r\n\r\n    const [newSettings,setNewSettings]= useState(timeMode)\r\n\r\n// меняем локальный state \r\n    const updateSettingPomodoro=(e)=>{\r\n        setNewSettings({...newSettings, pomodoro:{...newSettings.pomodoro, time:e.target.value}})\r\n    }\r\n    const updateSettingShortBreack=(e)=>{\r\n        setNewSettings({...newSettings, shortBreak:{...newSettings.shortBreack, time:e.target.value}})\r\n    }\r\n    const updateSettingLongBreack=(e)=>{\r\n        setNewSettings({...newSettings, longBreak:{...newSettings.longBreak, time:e.target.value}})\r\n    }\r\n\r\n//закрытие модального окна \r\n    const onModalClose=()=>{\r\n        dispatch(ModalCloase(title))\r\n    }\r\n// установка новых значений в таймер кнопка(ок)\r\n    let onUpdateTime=()=>{\r\n        onModalClose()\r\n        dispatch(changeTimeModal(newSettings))\r\n    }\r\n\r\n    return (\r\n        <div className={`modal__wrapper ${isOpened ? 'open' : 'close'}`}>\r\n            <div className=\"modal__body\">\r\n                <div className=\"modal__close\" onClick={onModalClose}>×</div>\r\n                <h2>{title}</h2>\r\n                <hr />\r\n                <div className='time-wrapper' >\r\n                    <h2>Time(minutes)</h2>\r\n                    <div className='time-block'>\r\n                        <div className=\"mode\">\r\n                            <p>Pomodoro</p>\r\n                            <input name='pomodoro' onChange={updateSettingPomodoro} type=\"number\" value={newSettings.pomodoro.time}  className=\"raz\"/>\r\n                        </div>\r\n                        <div className=\"mode\">\r\n                            <p>Short breack</p>\r\n                            <input name='shortBreak' onChange={updateSettingShortBreack} type=\"number\"  value={newSettings.shortBreak.time}  className=\"raz\"/>\r\n                        </div>\r\n                        <div className=\"mode\">\r\n                            <p>Long breack</p>\r\n                            <input name='longBreak' onChange={updateSettingLongBreack} type=\"number\"  value={newSettings.longBreak.time}  className=\"raz\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button onClick={onUpdateTime} href=\"/\" className=\"double-border-button\">OK</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ModalSetting;","import React from 'react'\r\nimport './inputAddTasks.css'\r\n\r\n\r\nclass InputAddTasks extends React.Component{\r\n    render(){\r\n        return(\r\n        <div className='form-wrapper'>\r\n            <div className='form-input-wrapper'>\r\n                <input placeholder='What are you working on?' type=\"text\" className='input-form'/>\r\n            </div>\r\n            <div className='input-button'>\r\n                <button onClick={()=>{this.props.onCansel(false)}} className='cansel-btn'>Cansel</button>\r\n                <button className='save-btn'>Save</button>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InputAddTasks;","import {useState,} from 'react'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport './toDoList.css'\r\nimport {deleteTask,changeTaskDone,addNewTask} from '../../redux/actionCreators'\r\nimport InputAddTasks from './inputAddTasks/inputAddTasks'\r\n\r\n\r\nconst ToDoList =()=>{\r\n\r\n    let [openForm,setTogleOpenForm] = useState(false);\r\n\r\n    const state = useSelector(state=>state),\r\n        dispatch = useDispatch(),\r\n        tasks = state.tasks;\r\n    \r\n    const onChangeTaskDone =(id)=>{\r\n        dispatch(changeTaskDone(id))\r\n    }\r\n    const onDeleteTask =(id)=>{\r\n        dispatch(deleteTask(id))\r\n    }\r\n\r\n    // const onAddNewTask =(text)=>{\r\n    //     dispatch(addNewTask(text))\r\n    // }\r\n\r\n\r\n    let activeTasks = tasks.filter(el => el.done === false).map((item,index) =>{\r\n        return  <li key = {index} className='item-list'>\r\n                    <div className='content-left' name={item.name}>\r\n                        <button onClick={()=>{onChangeTaskDone(item.id)}} className='btn-ok'>\r\n                            <i className=\"bi bi-patch-check\"></i>\r\n                        </button>\r\n                        <div className='textToDo'>{item.text}</div>\r\n                    </div>\r\n                    <button onClick={()=>{onDeleteTask(item.id)}} className=\"btn-ok\">\r\n                        <i className=\"bi bi-trash\"></i>\r\n                    </button>\r\n                </li>\r\n    })\r\n\r\n    return(\r\n        <div className='tasks-wrapper'>\r\n            <div className='active-tasks'>\r\n                <ul className='active-ul'>{activeTasks}</ul>\r\n            </div>\r\n            {openForm ? <InputAddTasks onCansel={setTogleOpenForm}/> : \r\n                <button onClick={()=>{setTogleOpenForm(true)}} className='button-add-task'>+Add task</button> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import {changeMode} from '../../../redux/actionCreators'\r\nimport './buttonMode.css'\r\n\r\nconst ButtonMode =({mode,dispatch})=>{\r\n\r\n    const onDispatchChangeSettings=(e)=>{\r\n        dispatch(changeMode(e.target.name))\r\n    }\r\n\r\n\r\n    const buttonData  =[\r\n        {name:'pomodoro', label:'Pomodoro'},\r\n        {name:'shortBreak', label:'Short Break'},\r\n        {name:'longBreak', label:'Long Break'}\r\n    ]\r\n    const buttons = buttonData.map(item =>{\r\n        const active = mode === item.name;\r\n        const clazz = active ? \"timer-btn__mode-active\" :  \"timer-btn__mode\";\r\n        return <button \r\n                onClick={onDispatchChangeSettings}\r\n                className={clazz}\r\n                name={item.name}\r\n                key = {item.name}\r\n                type=\"button\">\r\n                    {item.label}\r\n            </button>\r\n    })\r\n\r\n    return(\r\n        <div className=\"timer-btn\">\r\n            {buttons}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonMode;","import {useEffect,useState} from 'react'\r\nimport {useDispatch} from 'react-redux'\r\nimport React from 'react'\r\nimport './timerCount.css'\r\nimport {addHistoryPomodoro,addHistoryLongBreak,addHistoryShortBreak} from '../../../redux/actionCreators'\r\n\r\nconst TimerCount =({settings, mode})=>{\r\n  const dispatch = useDispatch()\r\n\r\n  let timeMode;\r\n  \r\n  switch(mode){\r\n    case 'pomodoro':\r\n      timeMode = settings.pomodoro.time;\r\n      break\r\n    case 'shortBreak':\r\n      timeMode = settings.shortBreak.time;\r\n      break\r\n    case 'longBreak':\r\n      timeMode = settings.longBreak.time;\r\n      break\r\n    default: timeMode='';\r\n  }\r\n  \r\n\r\n  let [count,setCount] = useState(timeMode * 60);\r\n  let [timerActive, settimerActive] = useState(false);\r\n  \r\n      \r\n\r\n  const onToggleStart=()=>{settimerActive(state=>{return  !state})}\r\n\r\n  \r\n// ф-ция по добававлению 0 если длина читсла 1 \r\n  const padTime = time => {return String(time).length === 1 ? `0${time}` : `${time}`;};\r\n// форматирует время в MM:СС\r\n  const format = time => {\r\n      const minutes = Math.floor(time / 60);\r\n      const seconds = time % 60;\r\n      return `${minutes}:${padTime(seconds)}`;\r\n  };\r\n// окончание таймера запись в историю \r\n\r\n  useEffect(()=>{\r\n    if(count ===20){\r\n      if(mode === 'pomodoro'){\r\n        dispatch(addHistoryPomodoro())\r\n       }else if (mode === 'shortBreak'){\r\n         dispatch(addHistoryShortBreak())\r\n       }else if(mode === 'longBreak'){\r\n         dispatch(addHistoryLongBreak())\r\n       }\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [count])\r\n\r\n  useEffect(() => {\r\n    let timer;\r\n    if (count > 0 && timerActive) {\r\n      timer = setTimeout(() => setCount(c => {\r\n        return c - 1;\r\n\r\n      }), 1000);\r\n    }\r\n    return () => {\r\n      if (timer) {\r\n        clearTimeout(timer);\r\n      }\r\n    };\r\n  }, [count, timerActive]);\r\n\r\n\r\n\r\n//стилизация кнопки старт let clazzTimerColor= 'timer';\r\n  let clazzBtnStartColor = 'timer-btn-start'\r\n  switch(mode){\r\n\r\n    case \"shortBreak\":\r\n      clazzBtnStartColor = \"timer-btn-start blue\";\r\n            break;\r\n    case \"longBreak\":\r\n      clazzBtnStartColor = \"timer-btn-start navyBlue\";\r\n            break;\r\n    default:\r\n      clazzBtnStartColor = \"timer-btn-start\";\r\n  }\r\n  \r\n\r\n  return(\r\n        <>\r\n          <div className=\"timer-string\">{ count > 0 && timerActive ? format(count) : format(count)}</div>\r\n          <button onClick={onToggleStart} className={clazzBtnStartColor}>{timerActive? \"stop\" : \"start\"}</button>\r\n        </>\r\n  )\r\n}\r\n\r\nexport default TimerCount;","import { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport ButtonMode from \"./buttonMode/buttonMode\"\r\nimport TimerCount from \"./timerCount/timerCount\"\r\nimport './timer.css'\r\n\r\n\r\nconst Timer =()=>{\r\n\r\n    const {mode, settings} = useSelector(state=>state)\r\n    const dispatch = useDispatch()\r\n\r\n    //костыль для обновления таймера при смене времени \r\n    let key = settings.pomodoro.time + settings.shortBreak.time + settings.longBreak.time;\r\n    return(\r\n        <div className='timer'>\r\n                <ButtonMode mode={mode}\r\n                dispatch={dispatch}/>\r\n            <TimerCount key={key} mode={mode} settings ={settings}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer;","\r\nimport Head from \"../head/head\"\r\nimport ModalHistory from '../modal/modalHistory/modalHistory';\r\nimport ModalSetting from '../modal/modalSetting/modalSetting';\r\nimport ToDoList from '../toDoList/toDoList';\r\nimport Timer from \"../timer/timer\"\r\nimport './app.css';\r\nimport { useSelector } from 'react-redux';\r\nimport React from \"react\";\r\n\r\nconst  App =()=> {\r\n\r\n// костыль для перерисовки таймера \r\nconst state = useSelector(state=>state)\r\n\r\n    return (<>\r\n        <div className=\"container\">\r\n          <Head />\r\n          <div className=\"body\">\r\n            <Timer key={state.mode}/>\r\n            <ToDoList />\r\n          </div>\r\n        </div>\r\n        <ModalHistory />\r\n        <ModalSetting  />\r\n      </>)\r\n  \r\n}\r\n\r\nexport default App;\r\n","let initialState = {\r\n    settings: {\r\n        pomodoro: {\r\n            name: \"pomodoro\",\r\n            time: 25,\r\n        },\r\n        shortBreak: {\r\n            name: \"shortBreak\",\r\n            time: 5,\r\n        },\r\n        longBreak: {\r\n            name: \"longBreak\",\r\n            time: 10,\r\n        },\r\n        autoPlay:false\r\n    },\r\n    tasks:[\r\n        {id:1, text:'хей нажми на эту кнопку, что бы удалить эту  задачу ⇒', numberPomodoro: 1, done:false},\r\n        {id:2, text:'⇐ А теперь нажми сюда если сделал ее', numberPomodoro: 2, done:false},\r\n        {id:3, text: 'Прошлая задача исчезла но ты все еще можешь посмотреть ее нажав на кнопку  History, она находится на самом верху ↑', numberPomodoro: 4, done:false},\r\n        {id:4, text:'что бы добавить задачу нажми на кнопку +Add task которая находится в самом низу 🠗', numberPomodoro: 4, done:false},\r\n    ],\r\n    mode: \"pomodoro\",\r\n    modal:{\r\n        history:{\r\n            isOpened: false,\r\n            title: \"History\",},\r\n        setting:{\r\n            isOpened: false,\r\n            title: \"Setting\",},\r\n        login:{\r\n            isOpened: false,\r\n            title: \"Login\",\r\n        }\r\n    },\r\n    history:{\r\n        pomodoro:0,\r\n        shortBreak:0,\r\n        longBreak:0\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE-MODE\": {\r\n            return {...state, mode:action.payload}\r\n        }\r\n        case \"MODAL-OPEN-HISTORY\": {\r\n            return{...state, modal:{...state.modal, history:{...state.modal.history,isOpened:true}}}\r\n        }\r\n        case \"MODAL-OPEN-SETTING\": {\r\n            return{...state, modal:{...state.modal, setting:{...state.modal.setting,isOpened:true}}}\r\n        }\r\n        case \"MODAL-CLOASE\": {\r\n            return{...state, modal:{...state.modal, setting:{...state.modal.setting,isOpened:false},history:{...state.modal.history,isOpened:false}}}\r\n        }\r\n        case \"CHANGE-TIME-MODAL\": {\r\n            return{...state,settings:{...action.payload}}\r\n        }\r\n        case \"ADD-HISTORY-POMODORO\": {\r\n            return{...state,history:{...state.history, pomodoro:state.history.pomodoro + 1}}\r\n        }\r\n        case \"ADD-HISTORY-SHORT-BREAK\": {\r\n            return{...state,history:{...state.history, shortBreak:state.history.shortBreak + 1}}\r\n        }\r\n        case \"ADD-HISTORY-LONG-BREAK\": {\r\n            return{...state,history:{...state.history, longBreak:state.history.longBreak + 1}}\r\n        }\r\n        case \"CHANGE-TASK-DONE\": {\r\n            let newTasks=[...state.tasks];\r\n            let index = newTasks.findIndex(el => el.id === action.payload)\r\n            newTasks[index].done = true;\r\n            return{...state, tasks:newTasks}\r\n        }\r\n        case \"DELETE-TASK\": {\r\n            let newTasks =  state.tasks.filter((el)=>el.id !== action.payload);\r\n            return{...state,tasks:newTasks}\r\n        }\r\n        case \"ADD-NEW-TASK\": {\r\n            return{...state,tasks:[]}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;","import { createStore } from \"redux\";\r\nimport reducer from './reducer';\r\n\r\nlet store = createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\nexport default store;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}